2:I[8185,["250","static/chunks/250-2c92a8b3297abe92.js","439","static/chunks/439-1cbcf06a60107edf.js","605","static/chunks/app/tags/%5Btag%5D/page-9f2b6c3ba00bc9e7.js"],""]
3:I[5613,[],""]
5:I[1778,[],""]
6:I[8029,["250","static/chunks/250-2c92a8b3297abe92.js","449","static/chunks/449-dbe3acf9b229b2b6.js","185","static/chunks/app/layout-223665e243f1bf19.js"],"ThemeProviders"]
7:I[5935,["250","static/chunks/250-2c92a8b3297abe92.js","449","static/chunks/449-dbe3acf9b229b2b6.js","185","static/chunks/app/layout-223665e243f1bf19.js"],""]
8:I[8625,["250","static/chunks/250-2c92a8b3297abe92.js","449","static/chunks/449-dbe3acf9b229b2b6.js","185","static/chunks/app/layout-223665e243f1bf19.js"],"KBarSearchProvider"]
9:I[5250,["250","static/chunks/250-2c92a8b3297abe92.js","904","static/chunks/app/tags/page-e6b214319fc4b111.js"],""]
a:I[8271,["250","static/chunks/250-2c92a8b3297abe92.js","449","static/chunks/449-dbe3acf9b229b2b6.js","185","static/chunks/app/layout-223665e243f1bf19.js"],"KBarButton"]
b:I[5021,["250","static/chunks/250-2c92a8b3297abe92.js","449","static/chunks/449-dbe3acf9b229b2b6.js","185","static/chunks/app/layout-223665e243f1bf19.js"],""]
c:I[6422,["250","static/chunks/250-2c92a8b3297abe92.js","449","static/chunks/449-dbe3acf9b229b2b6.js","185","static/chunks/app/layout-223665e243f1bf19.js"],""]
4:["tag","java","d"]
0:["2wAuILjAjiAoNZ2SErs7i",[[["",{"children":["tags",{"children":[["tag","java","d"],{"children":["__PAGE__?{\"tag\":\"java\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["tags",{"children":[["tag","java","d"],{"children":["__PAGE__",{},["$L1",["$","$L2",null,{"posts":[{"title":"消息队列常见问题和解决方案","date":"2022-04-30T00:00:00.000Z","tags":["java"],"draft":false,"summary":"消息队列在现代应用架构中起着不可或缺的作用，特别是在削峰填谷、异步通信和系统解耦方面。然而，在利用这些优势的同时，我们也会遇到一些常见的挑战，如消息丢失、消息重复消费和消息积压等问题。本文旨在探讨这些问题的原因和解决方案","type":"Blog","readingTime":{"text":"6 min read","minutes":5.235,"time":314100,"words":1047},"slug":"2023-12-25-消息队列常见问题和解决方案","path":"blog/2023-12-25-消息队列常见问题和解决方案","filePath":"blog/2023-12-25-消息队列常见问题和解决方案.md","toc":[{"value":"消息队列的主要作用","url":"#消息队列的主要作用","depth":1},{"value":"消息队列的主要问题","url":"#消息队列的主要问题","depth":1},{"value":"主流消息队列选型","url":"#主流消息队列选型","depth":1},{"value":"可用案例","url":"#可用案例","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"消息队列常见问题和解决方案","datePublished":"2022-04-30T00:00:00.000Z","dateModified":"2022-04-30T00:00:00.000Z","description":"消息队列在现代应用架构中起着不可或缺的作用，特别是在削峰填谷、异步通信和系统解耦方面。然而，在利用这些优势的同时，我们也会遇到一些常见的挑战，如消息丢失、消息重复消费和消息积压等问题。本文旨在探讨这些问题的原因和解决方案","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2023-12-25-消息队列常见问题和解决方案"}},{"title":"什么时候应该使用Parallel Stream","date":"2022-01-30T00:00:00.000Z","tags":["java"],"draft":false,"summary":"Java8引入了Stream API,它使得将集合作为数据流进行迭代变非常很容易。创建并行执行并利用多个CPU的流也非常容易.我们可能会认为,并行执行任务一定比串行执行快,但情况往往并非如此.这篇文章分析了常见情况下使用流对性能的影响.以及什么情况下使用流能提升性能.","type":"Blog","readingTime":{"text":"8 min read","minutes":7.535,"time":452100,"words":1507},"slug":"2022-01-30-如何使用Parallel Stream","path":"blog/2022-01-30-如何使用Parallel Stream","filePath":"blog/2022-01-30-如何使用Parallel Stream.md","toc":[{"value":"java 中的流","url":"#java-中的流","depth":2},{"value":"顺序流","url":"#顺序流","depth":2},{"value":"并行流","url":"#并行流","depth":2},{"value":"fork-join 线程池","url":"#fork-join-线程池","depth":2},{"value":"自定义线程池","url":"#自定义线程池","depth":2},{"value":"分割数据源的副作用","url":"#分割数据源的副作用","depth":2},{"value":"对性能的影响","url":"#对性能的影响","depth":2},{"value":"简单操作的开销对比","url":"#简单操作的开销对比","depth":3},{"value":"数据结构对并行操作的性能影响","url":"#数据结构对并行操作的性能影响","depth":3},{"value":"对事务的影响","url":"#对事务的影响","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"什么时候应该使用Parallel Stream","datePublished":"2022-01-30T00:00:00.000Z","dateModified":"2022-01-30T00:00:00.000Z","description":"Java8引入了Stream API,它使得将集合作为数据流进行迭代变非常很容易。创建并行执行并利用多个CPU的流也非常容易.我们可能会认为,并行执行任务一定比串行执行快,但情况往往并非如此.这篇文章分析了常见情况下使用流对性能的影响.以及什么情况下使用流能提升性能.","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2022-01-30-如何使用Parallel Stream"}},{"title":"Java字符串性能相关","date":"2022-01-03T00:00:00.000Z","tags":["java"],"draft":false,"summary":"java是一门注重实用,降低开发难度的语言,所以java引入了gc,并且把字符串中复杂的部分全封装在了语法之后,不让用户接触这些,宁可丢失一点点效率也不愿意让用户面对复杂的语法.在本教程中,将重点介绍Java string API的性能方面,深入挖掘字符串的创建、转换和修改操作来分析可用的选项,并比较它们的效率.","type":"Blog","readingTime":{"text":"10 min read","minutes":9.485,"time":569100,"words":1897},"slug":"2022-01-03-Java字符串性能相关","path":"blog/2022-01-03-Java字符串性能相关","filePath":"blog/2022-01-03-Java字符串性能相关.md","toc":[{"value":"字符串本身的复杂性","url":"#字符串本身的复杂性","depth":2},{"value":"如何构建一个字符串","url":"#如何构建一个字符串","depth":2},{"value":"尽量避免使用构造函数创建字符串","url":"#尽量避免使用构造函数创建字符串","depth":3},{"value":"另一种构建字符串的方式","url":"#另一种构建字符串的方式","depth":4},{"value":"用哪种拼接字符串能获得更好的性能","url":"#用哪种拼接字符串能获得更好的性能","depth":3},{"value":"+操作符","url":"#操作符","depth":4},{"value":"String.concat()","url":"#stringconcat","depth":4},{"value":"StringBuilder 和 StringBuffer","url":"#stringbuilder-和-stringbuffer","depth":3},{"value":"将数值转换为字符串","url":"#将数值转换为字符串","depth":3},{"value":"判断字符串是否为空","url":"#判断字符串是否为空","depth":3},{"value":"消除重复内存分配以及减少复制","url":"#消除重复内存分配以及减少复制","depth":3},{"value":"String.intern()","url":"#stringintern","depth":4},{"value":"总结","url":"#总结","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Java字符串性能相关","datePublished":"2022-01-03T00:00:00.000Z","dateModified":"2022-01-03T00:00:00.000Z","description":"java是一门注重实用,降低开发难度的语言,所以java引入了gc,并且把字符串中复杂的部分全封装在了语法之后,不让用户接触这些,宁可丢失一点点效率也不愿意让用户面对复杂的语法.在本教程中,将重点介绍Java string API的性能方面,深入挖掘字符串的创建、转换和修改操作来分析可用的选项,并比较它们的效率.","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2022-01-03-Java字符串性能相关"}},{"title":"GuavaCache强引用导致的内存泄漏问题","date":"2021-06-27T00:00:00.000Z","tags":["java","bug排查"],"draft":false,"summary":"看了网上的例子就直接抄过来用的人总是能写出一些奇奇怪怪的bug.","type":"Blog","readingTime":{"text":"5 min read","minutes":4.585,"time":275100,"words":917},"slug":"2021-06-27-GuavaCache强引用导致out of memory error","path":"blog/2021-06-27-GuavaCache强引用导致out of memory error","filePath":"blog/2021-06-27-GuavaCache强引用导致out of memory error.md","toc":[{"value":"排查问题","url":"#排查问题","depth":1},{"value":"配置","url":"#配置-1","depth":2},{"value":"通过 VisualVM 分析内存快照","url":"#通过-visualvm-分析内存快照","depth":2},{"value":"查看占用内存最多的对象","url":"#查看占用内存最多的对象","depth":2},{"value":"排查代码","url":"#排查代码","depth":2},{"value":"Java 的引用类型","url":"#java-的引用类型","depth":2},{"value":"本地缓存和分布式缓存","url":"#本地缓存和分布式缓存","depth":2},{"value":"参考资料","url":"#参考资料-4","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"GuavaCache强引用导致的内存泄漏问题","datePublished":"2021-06-27T00:00:00.000Z","dateModified":"2021-06-27T00:00:00.000Z","description":"看了网上的例子就直接抄过来用的人总是能写出一些奇奇怪怪的bug.","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2021-06-27-GuavaCache强引用导致out of memory error"}},{"title":"AtomicReference和原子操作","date":"2021-06-25T00:00:00.000Z","tags":["java"],"draft":false,"summary":"AtomicReference类提供了一个可以将普通对象包装为原子对象的工具.原子对象意味着在多个线程同时修改一个AtomicReference<T>引用的对象时可以保证线程安全.一般来说,在多个线程访问共享资源时,需要通过加锁控制并发","type":"Blog","readingTime":{"text":"3 min read","minutes":2.365,"time":141900,"words":473},"slug":"2021-06-25-AtomicReference和原子操作","path":"blog/2021-06-25-AtomicReference和原子操作","filePath":"blog/2021-06-25-AtomicReference和原子操作.md","toc":[{"value":"compareAndSet 方法","url":"#compareandset-方法","depth":2},{"value":"set 方法","url":"#set-方法-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"AtomicReference和原子操作","datePublished":"2021-06-25T00:00:00.000Z","dateModified":"2021-06-25T00:00:00.000Z","description":"AtomicReference类提供了一个可以将普通对象包装为原子对象的工具.原子对象意味着在多个线程同时修改一个AtomicReference<T>引用的对象时可以保证线程安全.一般来说,在多个线程访问共享资源时,需要通过加锁控制并发","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2021-06-25-AtomicReference和原子操作"}},{"title":"interface xx is not visible from ClassLoader","date":"2021-06-01T00:00:00.000Z","tags":["java","bug排查"],"draft":false,"type":"Blog","readingTime":{"text":"2 min read","minutes":1.335,"time":80100,"words":267},"slug":"2021-06-01-interface xx is not visible from ClassLoader","path":"blog/2021-06-01-interface xx is not visible from ClassLoader","filePath":"blog/2021-06-01-interface xx is not visible from ClassLoader.md","toc":[{"value":"问题代码","url":"#问题代码","depth":2},{"value":"原因分析","url":"#原因分析","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"interface xx is not visible from ClassLoader","datePublished":"2021-06-01T00:00:00.000Z","dateModified":"2021-06-01T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2021-06-01-interface xx is not visible from ClassLoader"}},{"title":"mysql参数数量过多导致索引选择异常","date":"2021-05-30T00:00:00.000Z","tags":["database","java","mysql"],"draft":false,"type":"Blog","readingTime":{"text":"1 min read","minutes":0.745,"time":44700,"words":149},"slug":"2021-05-30-mysql参数数量过多导致索引选择异常","path":"blog/2021-05-30-mysql参数数量过多导致索引选择异常","filePath":"blog/2021-05-30-mysql参数数量过多导致索引选择异常.md","toc":[{"value":"例子","url":"#例子-2","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"mysql参数数量过多导致索引选择异常","datePublished":"2021-05-30T00:00:00.000Z","dateModified":"2021-05-30T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2021-05-30-mysql参数数量过多导致索引选择异常"}},{"title":"lombok原理以及介绍","date":"2020-08-31T00:00:00.000Z","tags":["java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"6 min read","minutes":5.13,"time":307800,"words":1026},"slug":"2020-08-31-lombok原理以及介绍","path":"blog/2020-08-31-lombok原理以及介绍","filePath":"blog/2020-08-31-lombok原理以及介绍.md","toc":[{"value":"lombok 原理","url":"#lombok-原理","depth":2},{"value":"lombok 的弱点","url":"#lombok-的弱点","depth":2},{"value":"lombok 功能介绍","url":"#lombok-功能介绍","depth":2},{"value":"val","url":"#val","depth":4},{"value":"var","url":"#var","depth":4},{"value":"@NonNull","url":"#nonnull","depth":4},{"value":"@Cleanup","url":"#cleanup","depth":4},{"value":"@Getter/@Setter","url":"#gettersetter","depth":4},{"value":"@ToString","url":"#tostring","depth":4}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"lombok原理以及介绍","datePublished":"2020-08-31T00:00:00.000Z","dateModified":"2020-08-31T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2020-08-31-lombok原理以及介绍"}},{"title":"用一个简单例子解释什么是Oauth2","date":"2020-05-19T00:00:00.000Z","tags":["spring","java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"4 min read","minutes":3.815,"time":228900,"words":763},"slug":"2020-05-19-用一个简单例子解释什么是Oauth2","path":"blog/2020-05-19-用一个简单例子解释什么是Oauth2","filePath":"blog/2020-05-19-用一个简单例子解释什么是Oauth2.md","toc":[{"value":"Oauth2 的定义","url":"#oauth2-的定义","depth":2},{"value":"1.Oauth2 解决了什么问题","url":"#1oauth2-解决了什么问题","depth":4},{"value":"2.名词解释","url":"#2名词解释","depth":4},{"value":"3.Oauth2 的工作流程","url":"#3oauth2-的工作流程","depth":4},{"value":"以微信授权登录为例子:","url":"#以微信授权登录为例子","depth":5},{"value":"4.基于 Spring Cloud 实现 Oauth2 认证授权","url":"#4基于-spring-cloud-实现-oauth2-认证授权","depth":5}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"用一个简单例子解释什么是Oauth2","datePublished":"2020-05-19T00:00:00.000Z","dateModified":"2020-05-19T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2020-05-19-用一个简单例子解释什么是Oauth2"}},{"title":"用spring shell 写一个spring 应用监控程序","date":"2020-03-25T00:00:00.000Z","tags":["spring","java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"4 min read","minutes":3.645,"time":218700,"words":729},"slug":"2020-03-25-用spring shell 写一个spring 应用监控程序","path":"blog/2020-03-25-用spring shell 写一个spring 应用监控程序","filePath":"blog/2020-03-25-用spring shell 写一个spring 应用监控程序.md","toc":[{"value":"Spring shell 介绍","url":"#spring-shell-介绍","depth":2},{"value":"Spring shell 特性","url":"#spring-shell-特性","depth":2},{"value":"快速完成一个 Spring boot 应用监控程序","url":"#快速完成一个-spring-boot-应用监控程序","depth":2},{"value":"1.引入依赖","url":"#1引入依赖","depth":4},{"value":"2.启动应用","url":"#2启动应用","depth":4},{"value":"3.编写自定义指令","url":"#3编写自定义指令","depth":4},{"value":"4.源码地址","url":"#4源码地址","depth":4}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"用spring shell 写一个spring 应用监控程序","datePublished":"2020-03-25T00:00:00.000Z","dateModified":"2020-03-25T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2020-03-25-用spring shell 写一个spring 应用监控程序"}},{"title":"java agent技术详解","date":"2020-03-21T00:00:00.000Z","tags":["spring","java","技术","java agent"],"draft":false,"type":"Blog","readingTime":{"text":"11 min read","minutes":10.59,"time":635400,"words":2118},"slug":"2020-03-21-java agent技术详解","path":"blog/2020-03-21-java agent技术详解","filePath":"blog/2020-03-21-java agent技术详解.md","toc":[{"value":"Java Agent Hello World","url":"#java-agent-hello-world","depth":2},{"value":"Instrumentation","url":"#instrumentation","depth":2},{"value":"ClassFileTransformer","url":"#classfiletransformer","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"java agent技术详解","datePublished":"2020-03-21T00:00:00.000Z","dateModified":"2020-03-21T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2020-03-21-java agent技术详解"}},{"title":"警惕java数组协变特性导致的问题","date":"2020-03-01T00:00:00.000Z","tags":["java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"6 min read","minutes":5.875,"time":352500,"words":1175},"slug":"2020-03-01-警惕java数组协变特性导致的问题","path":"blog/2020-03-01-警惕java数组协变特性导致的问题","filePath":"blog/2020-03-01-警惕java数组协变特性导致的问题.md","toc":[{"value":"什么是协变和逆变?","url":"#什么是协变和逆变","depth":1},{"value":"里氏替换原则","url":"#里氏替换原则","depth":1},{"value":"回到一开始的问题","url":"#回到一开始的问题","depth":1},{"value":"如何才能让错误暴露的更明显","url":"#如何才能让错误暴露的更明显","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"警惕java数组协变特性导致的问题","datePublished":"2020-03-01T00:00:00.000Z","dateModified":"2020-03-01T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2020-03-01-警惕java数组协变特性导致的问题"}},{"title":"找到jvm中占用cpu最高的线程","date":"2020-02-17T00:00:00.000Z","tags":["java","技术","bug排查"],"draft":false,"type":"Blog","readingTime":{"text":"4 min read","minutes":3.825,"time":229500,"words":765},"slug":"2020-02-17-找到jvm中占用cpu最高的线程","path":"blog/2020-02-17-找到jvm中占用cpu最高的线程","filePath":"blog/2020-02-17-找到jvm中占用cpu最高的线程.md","toc":[{"value":"前言","url":"#前言-2","depth":4},{"value":"排查过程","url":"#排查过程","depth":4}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"找到jvm中占用cpu最高的线程","datePublished":"2020-02-17T00:00:00.000Z","dateModified":"2020-02-17T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2020-02-17-找到jvm中占用cpu最高的线程"}},{"title":"用scala + netty 写一个rest服务器","date":"2020-01-09T00:00:00.000Z","tags":["java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"4 min read","minutes":3.655,"time":219300,"words":731},"slug":"2020-01-09-用scala + netty 写一个rest服务器","path":"blog/2020-01-09-用scala + netty 写一个rest服务器","filePath":"blog/2020-01-09-用scala + netty 写一个rest服务器.md","toc":[],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"用scala + netty 写一个rest服务器","datePublished":"2020-01-09T00:00:00.000Z","dateModified":"2020-01-09T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2020-01-09-用scala + netty 写一个rest服务器"}},{"title":"自动拆装箱介绍以及可能引起的问题","date":"2019-12-03T00:00:00.000Z","tags":["读书笔记","java"],"draft":false,"type":"Blog","readingTime":{"text":"7 min read","minutes":6.965,"time":417900,"words":1393},"slug":"2019-12-03-自动拆装箱介绍以及可能引起的问题","path":"blog/2019-12-03-自动拆装箱介绍以及可能引起的问题","filePath":"blog/2019-12-03-自动拆装箱介绍以及可能引起的问题.md","toc":[{"value":"什么是自动拆装箱?","url":"#什么是自动拆装箱","depth":1},{"value":"自动装箱","url":"#自动装箱","depth":4},{"value":"自动拆箱","url":"#自动拆箱","depth":4},{"value":"拆装箱的时机","url":"#拆装箱的时机","depth":4},{"value":"自动拆装箱与缓存","url":"#自动拆装箱与缓存","depth":4},{"value":"自动拆装箱可能引起的问题","url":"#自动拆装箱可能引起的问题","depth":1},{"value":"先上结论","url":"#先上结论","depth":4},{"value":"例子","url":"#例子-1","depth":4},{"value":"原有方法 A","url":"#原有方法-a","depth":6},{"value":"通过反射获取getIdentity()方法","url":"#通过反射获取getidentity方法","depth":6},{"value":"解决问题","url":"#解决问题","depth":4}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"自动拆装箱介绍以及可能引起的问题","datePublished":"2019-12-03T00:00:00.000Z","dateModified":"2019-12-03T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-12-03-自动拆装箱介绍以及可能引起的问题"}},{"title":"ArrayList.add()报UnsupportedOperationException","date":"2019-09-12T00:00:00.000Z","tags":["java","bug排查"],"draft":false,"type":"Blog","readingTime":{"text":"1 min read","minutes":0.485,"time":29100,"words":97},"slug":"2019-09-12-ArrayList.add()报UnsupportedOperationException","path":"blog/2019-09-12-ArrayList.add()报UnsupportedOperationException","filePath":"blog/2019-09-12-ArrayList.add()报UnsupportedOperationException.md","toc":[],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"ArrayList.add()报UnsupportedOperationException","datePublished":"2019-09-12T00:00:00.000Z","dateModified":"2019-09-12T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-09-12-ArrayList.add()报UnsupportedOperationException"}},{"title":"java内存模型介绍","date":"2019-04-12T00:00:00.000Z","tags":["读书笔记","java"],"draft":false,"type":"Blog","readingTime":{"text":"4 min read","minutes":3.81,"time":228600,"words":762},"slug":"2019-04-12-java内存模型介绍","path":"blog/2019-04-12-java内存模型介绍","filePath":"blog/2019-04-12-java内存模型介绍.md","toc":[{"value":"关于 java 内存模型的定义","url":"#关于-java-内存模型的定义","depth":4},{"value":"java 内存模型的结构","url":"#java-内存模型的结构","depth":4},{"value":"程序计数器(Program Counter Register)","url":"#程序计数器program-counter-register","depth":6},{"value":"JAVA 虚拟机栈(Virtual Machine Stack)","url":"#java-虚拟机栈virtual-machine-stack","depth":6},{"value":"本地方法栈（Native Method Stacks）","url":"#本地方法栈native-method-stacks","depth":6},{"value":"堆内存(Heap)","url":"#堆内存heap","depth":6},{"value":"方法区(Method Area)","url":"#方法区method-area","depth":6}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"java内存模型介绍","datePublished":"2019-04-12T00:00:00.000Z","dateModified":"2019-04-12T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-04-12-java内存模型介绍"}},{"title":"通过原子变量保证程序的线程安全","date":"2019-03-18T00:00:00.000Z","tags":["读书笔记","并发","java"],"draft":false,"type":"Blog","readingTime":{"text":"5 min read","minutes":4.305,"time":258300,"words":861},"slug":"2019-03-18-通过原子变量保证程序的线程安全","path":"blog/2019-03-18-通过原子变量保证程序的线程安全","filePath":"blog/2019-03-18-通过原子变量保证程序的线程安全.md","toc":[{"value":"锁的劣势","url":"#锁的劣势","depth":2},{"value":"原子变量类","url":"#原子变量类","depth":2},{"value":"关于原子类型字段更新器的使用需要注意一下几个方面","url":"#关于原子类型字段更新器的使用需要注意一下几个方面","depth":6}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"通过原子变量保证程序的线程安全","datePublished":"2019-03-18T00:00:00.000Z","dateModified":"2019-03-18T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-03-18-通过原子变量保证程序的线程安全"}},{"title":"volatile关键字作用和原理","date":"2019-03-16T00:00:00.000Z","tags":["并发","java"],"draft":false,"type":"Blog","readingTime":{"text":"4 min read","minutes":3.685,"time":221100,"words":737},"slug":"2019-03-16-volatile关键字作用和原理","path":"blog/2019-03-16-volatile关键字作用和原理","filePath":"blog/2019-03-16-volatile关键字作用和原理.md","toc":[{"value":"作用 1 : 提供了变量可见性保证","url":"#作用-1--提供了变量可见性保证","depth":2},{"value":"违反可见性的例子例子","url":"#违反可见性的例子例子","depth":6},{"value":"为什么 volatile 变量能够保证变量的可见性","url":"#为什么-volatile-变量能够保证变量的可见性","depth":4},{"value":"作用 2.通过内存屏障保证有序性","url":"#作用-2通过内存屏障保证有序性","depth":2},{"value":"使用场景","url":"#使用场景-6","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"volatile关键字作用和原理","datePublished":"2019-03-16T00:00:00.000Z","dateModified":"2019-03-16T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-03-16-volatile关键字作用和原理"}},{"title":"详细了解java并发的三大特性,指令重排序和先行发生原则","date":"2019-03-14T00:00:00.000Z","tags":["读书笔记","并发","java"],"draft":false,"type":"Blog","readingTime":{"text":"11 min read","minutes":10.595,"time":635700,"words":2119},"slug":"2019-03-14-详细了解java并发的三大特性,指令重排序和先行发生原则","path":"blog/2019-03-14-详细了解java并发的三大特性,指令重排序和先行发生原则","filePath":"blog/2019-03-14-详细了解java并发的三大特性,指令重排序和先行发生原则.md","toc":[{"value":"原子性(Atomicity)","url":"#原子性atomicity","depth":2},{"value":"定义","url":"#定义","depth":3},{"value":"基本类型变量的原子性","url":"#基本类型变量的原子性","depth":4},{"value":"例子","url":"#例子","depth":5},{"value":"多个命令的原子性","url":"#多个命令的原子性","depth":4},{"value":"违反原子性的例子","url":"#违反原子性的例子","depth":4},{"value":"可见性(Visibility)","url":"#可见性visibility","depth":2},{"value":"定义","url":"#定义-1","depth":3},{"value":"普通变量的可见性","url":"#普通变量的可见性","depth":4},{"value":"volatile 变量的可见性","url":"#volatile-变量的可见性","depth":4},{"value":"其它保证可见性的技术","url":"#其它保证可见性的技术","depth":4},{"value":"违反可见性的例子","url":"#违反可见性的例子","depth":4},{"value":"有序性(Ordering)","url":"#有序性ordering","depth":2},{"value":"关于指令重排序","url":"#关于指令重排序","depth":2},{"value":"先行发生原则(happens-before)","url":"#先行发生原则happens-before","depth":2},{"value":"举个例子","url":"#举个例子","depth":5}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"详细了解java并发的三大特性,指令重排序和先行发生原则","datePublished":"2019-03-14T00:00:00.000Z","dateModified":"2019-03-14T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-03-14-详细了解java并发的三大特性,指令重排序和先行发生原则"}},{"title":"java.util.concurrent 并发包介绍","date":"2019-03-11T00:00:00.000Z","tags":["读书笔记","并发","java"],"draft":false,"type":"Blog","readingTime":{"text":"68 min read","minutes":67.36,"time":4041600,"words":13472},"slug":"2019-03-11-java.util.concurrent 并发包介绍","path":"blog/2019-03-11-java.util.concurrent 并发包介绍","filePath":"blog/2019-03-11-java.util.concurrent 并发包介绍.md","toc":[],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"java.util.concurrent 并发包介绍","datePublished":"2019-03-11T00:00:00.000Z","dateModified":"2019-03-11T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-03-11-java.util.concurrent 并发包介绍"}},{"title":"关于java的强引用,弱引用,软引用,虚引用","date":"2019-02-17T00:00:00.000Z","tags":["java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"10 min read","minutes":9.34,"time":560400,"words":1868},"slug":"2019-02-17-关于java的强引用,弱引用,软引用,虚引用","path":"blog/2019-02-17-关于java的强引用,弱引用,软引用,虚引用","filePath":"blog/2019-02-17-关于java的强引用,弱引用,软引用,虚引用.md","toc":[{"value":"1.强引用(StrongReference)","url":"#1强引用strongreference","depth":1},{"value":"2.软引用(SoftReference)","url":"#2软引用softreference","depth":1},{"value":"3.弱引用(WeakReference)","url":"#3弱引用weakreference","depth":1},{"value":"4. 虚引用(PhantomReference)","url":"#4-虚引用phantomreference","depth":1},{"value":"5、总结","url":"#5总结","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"关于java的强引用,弱引用,软引用,虚引用","datePublished":"2019-02-17T00:00:00.000Z","dateModified":"2019-02-17T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-02-17-关于java的强引用,弱引用,软引用,虚引用"}},{"title":"jvm垃圾回收算法介绍","date":"2019-02-14T00:00:00.000Z","tags":["读书笔记","java"],"draft":false,"type":"Blog","readingTime":{"text":"11 min read","minutes":10.025,"time":601500,"words":2005},"slug":"2019-02-14-jvm垃圾回收算法介绍","path":"blog/2019-02-14-jvm垃圾回收算法介绍","filePath":"blog/2019-02-14-jvm垃圾回收算法介绍.md","toc":[{"value":"判断 Java 中对象是否存活的算法","url":"#判断-java-中对象是否存活的算法","depth":1},{"value":"引用计数法","url":"#引用计数法","depth":2},{"value":"可达性分析算法","url":"#可达性分析算法","depth":2},{"value":"可以作为\"GC Root\"的对象包括以下几种:","url":"#可以作为gc-root的对象包括以下几种","depth":6},{"value":"垃圾回收算法","url":"#垃圾回收算法","depth":1},{"value":"标记-清除算法","url":"#标记-清除算法","depth":2},{"value":"标记-整理算法","url":"#标记-整理算法","depth":2},{"value":"标记-复制算法","url":"#标记-复制算法","depth":2},{"value":"分代收集算法","url":"#分代收集算法","depth":2},{"value":"分配策略","url":"#分配策略","depth":4},{"value":"分代收集算法是如何进行垃圾回收的","url":"#分代收集算法是如何进行垃圾回收的","depth":4},{"value":"如何改进复制算法","url":"#如何改进复制算法","depth":4}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"jvm垃圾回收算法介绍","datePublished":"2019-02-14T00:00:00.000Z","dateModified":"2019-02-14T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-02-14-jvm垃圾回收算法介绍"}},{"title":"jvm服务端优化配置速查","date":"2019-01-13T00:00:00.000Z","tags":["java","速查"],"draft":false,"type":"Blog","readingTime":{"text":"8 min read","minutes":7.585,"time":455100,"words":1517},"slug":"2019-01-13-jvm服务端优化配置速查","path":"blog/2019-01-13-jvm服务端优化配置速查","filePath":"blog/2019-01-13-jvm服务端优化配置速查.md","toc":[{"value":"总体思路","url":"#总体思路","depth":1},{"value":"让服务端应用以服务的模式执行","url":"#让服务端应用以服务的模式执行","depth":1},{"value":"-server","url":"#-server","depth":2},{"value":"显示地设置堆容量分配","url":"#显示地设置堆容量分配","depth":1},{"value":"-Xms -Xmx","url":"#-xms--xmx","depth":2},{"value":"-XX:MaxMetaspaceSize","url":"#-xxmaxmetaspacesize","depth":2},{"value":"-Xmn","url":"#-xmn","depth":2},{"value":"选择合适的 GC 算法","url":"#选择合适的-gc-算法","depth":1},{"value":"-XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled","url":"#-xxuseconcmarksweepgc--xxcmsparallelremarkenabled","depth":2},{"value":"-XX:+UseParNewGC","url":"#-xxuseparnewgc","depth":2},{"value":"-XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction","url":"#-xxusecmsinitiatingoccupancyonly--xxcmsinitiatingoccupancyfraction","depth":2},{"value":"-XX:+ScavengeBeforeFullGC","url":"#-xxscavengebeforefullgc","depth":2},{"value":"-XX:+CMSScavengeBeforeRemark","url":"#-xxcmsscavengebeforeremark","depth":2},{"value":"保存 GC 日志","url":"#保存-gc-日志","depth":1},{"value":"-XX:+PrintGCDateStamps -verbose:gc -XX:+PrintGCDetails -Xloggc:log_file_path","url":"#-xxprintgcdatestamps--verbosegc--xxprintgcdetails--xloggclog_file_path","depth":2},{"value":"-XX:+PrintAdaptiveSizePolicy","url":"#-xxprintadaptivesizepolicy","depth":2},{"value":"-XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles -XX:GCLogFileSize","url":"#-xxusegclogfilerotation--xxnumberofgclogfiles--xxgclogfilesize","depth":2},{"value":"保存 OOM 时的内存信息","url":"#保存-oom-时的内存信息","depth":1},{"value":"-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath","url":"#-xxheapdumponoutofmemoryerror--xxheapdumppath","depth":2},{"value":"开启 JMX 服务","url":"#开启-jmx-服务","depth":1},{"value":"-Djava.rmi.server.hostname","url":"#-djavarmiserverhostname","depth":2},{"value":"-Dcom.sun.management.jmxremote.port","url":"#-dcomsunmanagementjmxremoteport","depth":2},{"value":"-设置字符串常量池哈希表的大小.","url":"#-设置字符串常量池哈希表的大小","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"jvm服务端优化配置速查","datePublished":"2019-01-13T00:00:00.000Z","dateModified":"2019-01-13T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2019-01-13-jvm服务端优化配置速查"}},{"title":"ThreadLocal介绍以及原理","date":"2018-12-03T00:00:00.000Z","tags":["java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"6 min read","minutes":5.04,"time":302400,"words":1008},"slug":"2018-12-03-ThreadLocal介绍以及原理","path":"blog/2018-12-03-ThreadLocal介绍以及原理","filePath":"blog/2018-12-03-ThreadLocal介绍以及原理.md","toc":[{"value":"先看 [JAVA 并发编程实战]中对ThreadLocal的定义:","url":"#先看-java-并发编程实战中对threadlocal的定义","depth":3},{"value":"我的理解:","url":"#我的理解","depth":6},{"value":"那么,什么情况下需要使用ThreadLocal呢?","url":"#那么什么情况下需要使用threadlocal呢","depth":3},{"value":"避免参数传递","url":"#避免参数传递","depth":6},{"value":"设置线程上下文","url":"#设置线程上下文","depth":6},{"value":"ThreadLocal 的实现原理","url":"#threadlocal-的实现原理","depth":3},{"value":"set 方法","url":"#set-方法","depth":6},{"value":"get 方法","url":"#get-方法","depth":6},{"value":"ThreadLocalMap 是个静态的内部类：","url":"#threadlocalmap-是个静态的内部类","depth":6},{"value":"ThreadLocal 在线程池中可能引起内存泄露问题","url":"#threadlocal-在线程池中可能引起内存泄露问题","depth":3},{"value":"如何避免问题?","url":"#如何避免问题","depth":6}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"ThreadLocal介绍以及原理","datePublished":"2018-12-03T00:00:00.000Z","dateModified":"2018-12-03T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2018-12-03-ThreadLocal介绍以及原理"}},{"title":"为什么要使用线程池以及线程池用法详解","date":"2018-12-01T00:00:00.000Z","tags":["java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"7 min read","minutes":6.255,"time":375300,"words":1251},"slug":"2018-12-01-为什么要使用线程池以及线程池用法详解","path":"blog/2018-12-01-为什么要使用线程池以及线程池用法详解","filePath":"blog/2018-12-01-为什么要使用线程池以及线程池用法详解.md","toc":[{"value":"new Thread()的弊端","url":"#new-thread的弊端","depth":2},{"value":"这是一种不合适的做法.通过new Thread()创建新线程的弊端","url":"#这是一种不合适的做法通过new-thread创建新线程的弊端","depth":5},{"value":"通过线程池提交任务的好处","url":"#通过线程池提交任务的好处","depth":5},{"value":"Java 线程池","url":"#java-线程池","depth":2},{"value":"Java 通过 Executors 提供四种线程池,分别为：","url":"#java-通过-executors-提供四种线程池分别为","depth":5},{"value":"通过 ThreadPoolExecutor 自定义线程池","url":"#通过-threadpoolexecutor-自定义线程池","depth":2},{"value":"如何初始化 ThreadPoolExecutor","url":"#如何初始化-threadpoolexecutor","depth":5},{"value":"如何改写 ThreadPoolExecutor","url":"#如何改写-threadpoolexecutor","depth":5},{"value":"如何设置合适的线程池大小","url":"#如何设置合适的线程池大小","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"为什么要使用线程池以及线程池用法详解","datePublished":"2018-12-01T00:00:00.000Z","dateModified":"2018-12-01T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2018-12-01-为什么要使用线程池以及线程池用法详解"}},{"title":"单例模式进化史","date":"2018-12-01T00:00:00.000Z","tags":["java","技术"],"draft":false,"type":"Blog","readingTime":{"text":"4 min read","minutes":3.42,"time":205200,"words":684},"slug":"2018-12-01-单例模式进化史","path":"blog/2018-12-01-单例模式进化史","filePath":"blog/2018-12-01-单例模式进化史.md","toc":[],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"单例模式进化史","datePublished":"2018-12-01T00:00:00.000Z","dateModified":"2018-12-01T00:00:00.000Z","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/2018-12-01-单例模式进化史"}}],"title":"Java"}],null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"zh-cn","className":"__variable_587f35 scroll-smooth","suppressHydrationWarning":true,"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"76x76","href":"/static/favicons/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/static/favicons/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/static/favicons/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/site.webmanifest"}],["$","link",null,{"rel":"mask-icon","href":"/static/favicons/safari-pinned-tab.svg","color":"#5bbad5"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}],["$","body",null,{"className":"bg-white text-black antialiased dark:bg-gray-950 dark:text-white","children":["$","$L6",null,{"children":[["$undefined","$undefined","$undefined",["$","$L7",null,{"async":true,"defer":true,"data-website-id":"$undefined","src":"https://analytics.umami.is/script.js"}],"$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":["$","div",null,{"className":"flex h-screen flex-col justify-between font-sans","children":[["$","$L8",null,{"kbarConfig":{"searchDocumentsPath":"search.json"},"children":[["$","header",null,{"className":"flex items-center justify-between py-10","children":[["$","div",null,{"children":["$","$L9",null,{"href":"/","aria-label":"akamiiya的程序员之路","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","xmlnsXlink":"http://www.w3.org/1999/xlink","width":53.87,"height":43.61,"viewBox":"344.564 330.278 111.737 91.218","children":[["$","defs",null,{"children":[["$","linearGradient",null,{"id":"logo_svg__b","x1":420.97,"x2":420.97,"y1":331.28,"y2":418.5,"gradientUnits":"userSpaceOnUse","children":[["$","stop",null,{"offset":"0%","style":{"stopColor":"#06b6d4","stopOpacity":1}}],["$","stop",null,{"offset":"100%","style":{"stopColor":"#67e8f9","stopOpacity":1}}]]}],["$","linearGradient",null,{"id":"logo_svg__d","x1":377.89,"x2":377.89,"y1":331.28,"y2":418.5,"gradientUnits":"userSpaceOnUse","children":[["$","stop",null,{"offset":"0%","style":{"stopColor":"#06b6d4","stopOpacity":1}}],["$","stop",null,{"offset":"100%","style":{"stopColor":"#67e8f9","stopOpacity":1}}]]}],["$","path",null,{"id":"logo_svg__a","d":"M453.3 331.28v28.57l-64.66 58.65v-30.08z"}],["$","path",null,{"id":"logo_svg__c","d":"M410.23 331.28v28.57l-64.67 58.65v-30.08z"}]]}],["$","use",null,{"xlinkHref":"#logo_svg__a","fill":"url(#logo_svg__b)"}],["$","use",null,{"xlinkHref":"#logo_svg__c","fill":"url(#logo_svg__d)"}]]}]}],["$","div",null,{"className":"hidden h-6 text-2xl font-semibold sm:block","children":"akamiiya的程序员之路"}]]}]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:space-x-6","children":[[["$","$L9",null,{"href":"/blog","className":"hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"博客"}],["$","$L9",null,{"href":"/projects","className":"hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"工具"}],["$","$L9",null,{"href":"/tags","className":"hidden font-medium text-gray-900 dark:text-gray-100 sm:block","children":"标签"}]],["$","$La",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$Lb",null,{}],["$","$Lc",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pb-8 pt-6 md:space-y-5","children":["$","h1",null,{"className":"text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl font-bold leading-normal md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L9",null,{"href":"/","className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium leading-5 text-white shadow transition-colors duration-150 hover:bg-blue-700 focus:outline-none dark:hover:bg-blue-500","children":"Back to homepage"}]]}]]}],"notFoundStyles":[],"styles":null}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:tiers@qq.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":[["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://blog.laizeh.com","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-6 w-6","children":["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]}]]}],null,null,null,null,null,null]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"laizeh"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2024"}],["$","div",null,{"children":" • "}],["$","$L9",null,{"href":"/","children":"akamiiya的程序员之路"}]]}],["$","div",null,{"className":"mb-8 text-sm text-gray-500 dark:text-gray-400","children":["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://github.com/timlrx/tailwind-nextjs-starter-blog","children":"Tailwind Nextjs Theme"}]}]]}]}]]}]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/a6881ad4d2c479bd.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"java | akamiiya的程序员之路"}],["$","meta","3",{"name":"description","content":"读书笔记/踩坑/进步"}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","6",{"rel":"canonical","href":"https://tailwind-nextjs-starter-blog.vercel.app/tags/java"}],["$","link","7",{"rel":"alternate","type":"application/rss+xml","href":"https://tailwind-nextjs-starter-blog.vercel.app/tags/java/feed.xml"}],["$","meta","8",{"property":"og:title","content":"java | akamiiya的程序员之路"}],["$","meta","9",{"property":"og:description","content":"akamiiya的程序员之路 java tagged content"}],["$","meta","10",{"property":"og:url","content":"https://tailwind-nextjs-starter-blog.vercel.app/tags/java"}],["$","meta","11",{"property":"og:site_name","content":"akamiiya的程序员之路"}],["$","meta","12",{"property":"og:locale","content":"en_US"}],["$","meta","13",{"property":"og:image","content":"https://tailwind-nextjs-starter-blog.vercel.app/static/images/twitter-card.png"}],["$","meta","14",{"property":"og:type","content":"website"}],["$","meta","15",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","16",{"name":"twitter:title","content":"java | akamiiya的程序员之路"}],["$","meta","17",{"name":"twitter:description","content":"读书笔记/踩坑/进步"}],["$","meta","18",{"name":"twitter:image","content":"https://tailwind-nextjs-starter-blog.vercel.app/static/images/twitter-card.png"}],["$","meta","19",{"name":"next-size-adjust"}]]
1:null
